'use strict';

const express = require('express');
const transaction = express.Router();
require('dotenv').config();
const multer = require('multer');
const db = require('../db');
const xlsx = require('xlsx');
const jwt = require("jsonwebtoken");
const morgan = require('morgan');
const bodyParser = require('body-parser');
const cors = require('cors');
transaction.use(cors());
transaction.use(morgan('short'));
const path = require('path');

transaction.use('/Template', express.static('./Templates'));

const sql = db.sqlDb;

const storage = multer.memoryStorage();
const upload_1 = multer({ storage });

const storage_1 = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './User_Image/');
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname);
  }
});

const upload = multer({ storage: storage_1 });
// transaction.use('/ViewImage', express.static('User_Image'));

const corsOptions = {
  origin: true,
  credentials: true
}

transaction.options('*', cors(corsOptions));
transaction.use(bodyParser.urlencoded({ extended: false }));
transaction.use(bodyParser.json());

// POST route to handle file uploads
transaction.post('/File', upload_1.single('User_Add'), async (req, res) => {
  console.log('Uploaded File:', req.file);

  try {
    // Step 1: Validate file upload
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded. Please upload a file.' });
    }

    const pool = await db.poolPromise;

    // Step 4: If everything passes, process the file
    const workbook = xlsx.read(req.file.buffer, { type: 'array' });

    // Step 5: Validate that the uploaded file has sheets
    if (workbook.SheetNames.length === 0) {
      return res.status(400).json({ error: 'No sheets in the uploaded file.' });
    }

    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];

    // Step 6: Validate that the sheet is not empty
    if (!sheet) {
      return res.status(400).json({ error: 'The sheet is empty or missing data.' });
    }

    // Step 7: Convert the sheet data to JSON for further processing
    const data = xlsx.utils.sheet_to_json(sheet, { defval: '' });

    if (data.length === 0) {
      return res.status(400).json({ error: 'No data found in the sheet.' });
    }
    // Step 8: Validate expected columns in the sheet
    const expectedColumns = [
      'Plant_Code', 'From_Material_Code', 'From_Qty', 'From_Storage_Code', 'From_Valuation_Type', 'From_Batch',
      'From_Rate_Per_Unit', 'To_Material_Code', 'To_Qty', 'To_Storage_Code', 'To_Valuation_Type', 'To_Batch',
      'To_Rate_Per_Unit', 'Remark'
    ];
    const actualColumns = Object.keys(data[0] || {});

    const mismatchedColumns = expectedColumns.filter(col => !actualColumns.includes(col));

    if (mismatchedColumns.length > 0) {
      return res.status(400).json({
        message: `Invalid column names: ${mismatchedColumns.join(', ')}`
      });
    }
    // Step 9: Validate data integrity 
    const emptyData = [];
    const invalidPlantCode = [];
    const invalidFromMaterialCode = [];
    const invalidFromStorageCode = [];
    const invalidToMaterialCode = [];
    const invalidToStorageCode = [];
    const ValidData = [];


    data.forEach(entry => {
      if (entry.Plant_Code === '' ||
        entry.From_Material_Code === '' ||
        entry.From_Storage_Code === '' ||
        entry.To_Material_Code === '' ||
        entry.To_Storage_Code === '' 
      ) {
        emptyData.push(entry)
      }
      // Log invalid data for debugging
      console.log('Invalid Plant Code:', invalidPlantCode);
      console.log('Invalid From Material Code:', invalidFromMaterialCode);
      console.log('Invalid To Material Code:', invalidToMaterialCode);
      console.log('Invalid From Storage Code:', invalidFromStorageCode);
      console.log('Invalid To Storage Code:', invalidToStorageCode);
       // If any invalid data found, respond
      if (emptyData.length > 0) {
        return res.status(400).json({
          message: 'Uploaded File Contains Blank Columns',
          invalidData: emptyData
        });
      } else if (invalidPlantCode.length > 0) {
        return res.status(400).json({
          message: 'Invalid Plant_Code found.',
          invalidPlantCode
        });
      } else if (invalidFromMaterialCode.length > 0) {
        return res.status(400).json({
          message: 'Invalid From_Material_Code found.',
          invalidFromMaterialCode
        });
      } else if (invalidFromStorageCode.length > 0) {
        return res.status(400).json({
          message: 'Invalid From_Storage_Code found.',
          invalidFromStorageCode
        });
      }  else if (invalidToMaterialCode.length > 0) {
        return res.status(400).json({
          message: 'Invalid To_Material_Code found.',
          invalidToMaterialCode
        });
      } else if (invalidToStorageCode.length > 0) {
        return res.status(400).json({
          message: 'Invalid To_Storage_Code found.',
          invalidToStorageCode
        });
      }
      else {
        ValidData.push(entry);
      }
    });

    // If any invalid data found, respond accordingly
    if (emptyData.length > 0) {
      return res.status(400).json({
        message: 'Uploaded File Contains Blank Columns'
      });






    } else {
      const request = pool.request();
      const table = new sql.Table("#transation");
      table.create = true;
      table.columns.add("Plant_Code", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Material_Code", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Qty", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Storage_Code", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Valuation_Type", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Batch", sql.VarChar(100), { nullable: false });
      table.columns.add("From_Rate_Per_Unit", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Material_Code", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Qty", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Storage_Code", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Valuation_Type", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Batch", sql.VarChar(100), { nullable: false });
      table.columns.add("To_Rate_Per_Unit", sql.VarChar(100), { nullable: false });
      table.columns.add("Remark", sql.VarChar(100), { nullable: false });


      // Insert valid data into the table
      ValidData.forEach((item) => {
        const PlantCode = String(item.Plant_Code);
        const FromMatCode = item.From_Material_Code;
        const FromQty = item.From_Qty;
        const FromStorageCode = item.From_Storage_Code;
        const FromValuationType = item.From_Valuation_Type;
        const FromBatch = item.From_Batch;
        const FromRatePerUnit = item.From_Rate_Per_Unit;
        const ToMatCode = item.To_Material_Code;
        const ToQty = item.To_Qty;
        const ToStoargeCode = item.To_Storage_Code;
        const ToValuationType = item.To_Valuation_Type;
        const ToBatch = item.To_Batch;
        const ToRatePerUnit = item.To_Rate_Per_Unit;
        const Remark = item.Remark;

        table.rows.add(

          `${PlantCode}`,
          `${FromMatCode}`,
          `${FromQty}`,
          `${FromStorageCode}`,
          `${FromValuationType}`,
          `${FromBatch}`,
          `${ToRatePerUnit}`,
          `${ToMatCode}`,
          `${ToQty}`,
          `${ToStoargeCode}`,
          `${ToValuationType}`,
          `${ToBatch}`,
          `${ToRatePerUnit}`,
          `${Remark}`,
        );

      });
      console.log('table', table);
      await request.bulk(table);
     
    

    const insertdata = await pool.request()
      .input('Created_By', 1)
      .execute('UploadTrn309Movt')
    //const inserData = await request.execute(' ');
    // console.log('Invalid Data:', emptyData);
    // console.log('Insert Data:', insertdata);



    res.status(200).json({
      message: 'File uploaded and validated successfully!',
      NewRecord: insertdata.recordsets[0] || []  ,    // Newly inserted
      UpdatedData: insertdata.recordsets[1] || [],   // Updated
      ErrorRecords: insertdata.recordset[2] || [],  // Invalids
     
     
    });
    }

  } catch (error) {
    console.error('Error while processing the file:', error);
    res.status(500).send('Error while processing the file.');
  }
});

// // GET route to fetch movement data
// transaction.get('/GetMovementData', async (req, res) => {
//   try {
//     await sql.connect(process.env.DATABASE_URL); 
//     const result = await sql.query('EXEC GetTrn_309_Movement');
//     res.json(result.recordset);
//   } catch (error) {
//     console.error('Error while fetching data from stored procedure:', error);
//     res.status(500).send('Error while fetching data.');
//   } finally {
//     sql.close();
//   }
// });
transaction.get('/get_details', async (req, res) => {
  try {
    const pool = await db.poolPromise;
    console.log('Pool initialized:', pool);

    if (!pool || !pool.request) {
      console.error('Database pool not initialized or request method is not available.');
      return res.status(500).json({ success: false, message: 'Internal Server Error: Pool not initialized' });
    }

    const result = await pool.request().query(`EXEC GetTrn_309_Movement`);

    console.log('Query Result:', result.recordset);

    res.json(result.recordset);
  } catch (error) {
    console.error("❌ Error fetching details:", error.message, error.stack);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
});
transaction.get('/get_View', async (req, res) => {
  try {
    const pool = await db.poolPromise;
    console.log('Pool initialized:', pool);

    if (!pool || !pool.request) {
      console.error('Database pool not initialized or request method is not available.');
      return res.status(500).json({ success: false, message: 'Internal Server Error: Pool not initialized' });
    }

    const result = await pool.request().query(`EXEC GetTrn_309_Movement_View @Trn_309_ID= Null`);

    console.log('Query Result:', result.recordset);

    res.json(result.recordset);
  } catch (error) {
    console.error("❌ Error fetching details:", error.message, error.stack);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
});



// GET route for fetching plants, Plant id
transaction.get('/Get_Plants', async (req, res) => {
  try {
    const pool = await db.poolPromise;
    console.log('Pool initialized:', pool);

    if (!pool || !pool.request) {
      console.error('Database pool not initialized or request method is not available.');
      return res.status(500).json({ success: false, message: 'Internal Server Error: Pool not initialized' });
    }

    const result = await pool.request().query(`
      EXEC GetActivePlants;
    `);

    console.log('Plants Query Result:', result.recordset);

    res.json(result.recordset);
  } catch (error) {
    console.error("❌ Error fetching plants:", error.message, error.stack);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
});


// GET route for fetching Material, From Mat Id
transaction.get('/Get_Material', async (req, res) => {
  try {
    const pool = await db.poolPromise;
    console.log('Pool initialized:', pool);

    if (!pool || !pool.request) {
      console.error('Database pool not initialized or request method is not available.');
      return res.status(500).json({ success: false, message: 'Internal Server Error: Pool not initialized' });
    }

    const result = await pool.request().query(`
      select Material_ID, Material_Code from Mst_Material where Active_Status = 1
    `);

    console.log('Material Query Result:', result.recordset);

    res.json(result.recordset);
  } catch (error) {
    console.error("❌ Error fetching Material:", error.message, error.stack);
    res.status(500).json({ success: false, message: "Internal Server Error" });
  }
});


// POST route for adding material movement
transaction.post('/Get_Add', async (req, res) => {
  console.log(req.body);
  try {
    // Mapping request body parameters to variables
    const PlantCode = req.body.Plant_Code;  // Corrected to match frontend field
    const FromMatID = req.body.From_Material_Code;
    const FromQty = req.body.From_Qty;
    const FromSLocID = req.body.From_SLoc_Code;
    const FromValuationType = req.body.From_Valuation_Type;
    const FromBatch = req.body.From_Batch;
    const FromRatePerUnit = req.body.From_Rate_Per_Unit;
    const ToMatID = req.body.To_Material_Code;
    const ToQty = req.body.To_Qty;
    const ToSLocID = req.body.To_SLoc_Code;
    const ToValuationType = req.body.To_Valuation_Type;
    const ToBatch = req.body.To_Batch;
    const ToRatePerUnit = req.body.To_Rate_Per_Unit;
    const Remark = req.body.Remark;
    const CreatedBy = req.body.User_ID;
    const CreatedOn = req.body.createdOn;

    const pool = await db.poolPromise;

    // Execute the insert query into Trn_309_Movement table
    const result = await pool.request()
      .input('PlantCode', sql.Int, PlantCode)  // Corrected here
      .input('FromMaterialCode', sql.NVarChar(50), FromMatID)
      .input('FromQty', sql.Int, FromQty)
      .input('FromSLocID', sql.Int, FromSLocID)
      .input('FromValuationType', sql.NVarChar(50), FromValuationType)
      .input('FromBatch', sql.NVarChar(50), FromBatch)
      .input('FromRatePerUnit', sql.Decimal(6, 2), FromRatePerUnit)
      .input('ToMaterialCode', sql.NVarChar(50), ToMatID)
      .input('ToQty', sql.Int, ToQty)
      .input('ToSLocID', sql.Int, ToSLocID)
      .input('ToValuationType', sql.NVarChar(50), ToValuationType)
      .input('ToBatch', sql.NVarChar(50), ToBatch)
      .input('ToRatePerUnit', sql.Decimal(6, 2), ToRatePerUnit)
      .input('Remark', sql.NVarChar(255), Remark)
      .input('CreatedBy', sql.Int, CreatedBy)
      .query(`
      EXEC InsertTrn309Movt
        @PlantCode = @PlantCode,
        @FromMaterialCode = @FromMaterialCode,
        @FromQty = @FromQty,
        @FromSLocID = @FromSLocID,
        @FromValuationType = @FromValuationType,
        @FromBatch = @FromBatch,
        @FromRatePerUnit = @FromRatePerUnit,
        @ToMaterialCode = @ToMaterialCode,
        @ToQty = @ToQty,
        @ToSLocID = @ToSLocID,
        @ToValuationType = @ToValuationType,
        @ToBatch = @ToBatch,
        @ToRatePerUnit = @ToRatePerUnit,
        @Remark = @Remark,
        @CreatedBy = @CreatedBy
    `);

    // Send success response
    return res.status(200).json({ success: true, message: 'Record successfully added' });

  } catch (error) {
    console.error('Error in /Get_Add:', error);
    return res.status(500).json({ success: false, message: 'Internal Server Error', error: error.message });
  }
});

// Download From Date to To Date with excel

transaction.get('/download_data', async (req, res) => {
  console.log('download_data', req.query);
  try {
    const { From, to } = req.query;

    const pool = await db.poolPromise;

    // Execute the query with the provided date range
    const result = await pool.request()
      .input('FromDate', From)
      .input('ToDate', to)
      .execute('GetExistingTrn309Movt');

    console.log(result)

    res.status(200).json(
      result.recordset
    )

  } catch (error) {
    console.error("❌ Error generating the Excel file:", error.message, error.stack);
    res.status(500).json({ success: false, message: 'Error while generating the Excel file.' });
  }
});

module.exports = transaction;
