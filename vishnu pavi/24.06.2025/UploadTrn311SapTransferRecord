USE [Sap_Approval]
GO
/****** Object:  StoredProcedure [dbo].[UploadTrn311SapTransferRecord]    Script Date: 24-06-2025 12:24:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[UploadTrn311SapTransferRecord]
    @Created_By INT,
    @Movement_Code NVARCHAR(50) = '311'  -- Can accept comma-separated codes like '311,3101'
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Docid INT;

    -- Step 1: Enrich and Validate Input Data
    SELECT 
        t.*,
        m.Material_ID AS From_Material_ID,
        p.Plant_ID,
        s1.SLoc_ID AS From_SLoc_ID,
        s2.SLoc_ID AS To_SLoc_ID,

        -- Master Data Validations
        CASE WHEN p.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Plant_Val,
        CASE WHEN m.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Material_Val,
        CASE WHEN s1.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Val,
        CASE WHEN s2.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Val,

        -- Plant relationships
        CASE WHEN s1.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Plant_Val,
        CASE WHEN s2.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Plant_Val,
        CASE WHEN m.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS Material_Plant_Val,

        -- Movement Code Validation
        CASE 
            WHEN EXISTS (
                SELECT value FROM STRING_SPLIT(@Movement_Code, ',')
                WHERE value = t.Movement_Code
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS Movement_Val,

        -- User belongs to the same Plant
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM Mst_User u
                INNER JOIN Mst_Plant pl ON u.Plant_ID = pl.Plant_ID
                WHERE u.User_ID = @Created_By
                  AND pl.Plant_Code = t.Plant_Code
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS User_Plant_Val,

        -- Duplicate detection
        ROW_NUMBER() OVER (
            PARTITION BY t.Plant_Code, t.Material_Code, t.From_SLoc_Code 
            ORDER BY t.Plant_Code
        ) AS RowNum

    INTO #t1
    FROM #transation AS t
    LEFT JOIN Mst_Plant p ON p.Plant_Code = t.Plant_Code
    LEFT JOIN Mst_Material m ON m.Material_Code = t.Material_Code AND m.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Storage_Location s1 ON s1.Storage_Code = t.From_SLoc_Code AND s1.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Storage_Location s2 ON s2.Storage_Code = t.To_SLoc_Code AND s2.Plant_ID = p.Plant_ID;

    -- Step 2: Keep only valid, unique records
    SELECT * INTO #t2
    FROM #t1
    WHERE Plant_Val = 'Valid'
      AND Material_Val = 'Valid'
      AND From_SLoc_Val = 'Valid'
      AND To_SLoc_Val = 'Valid'
      AND From_SLoc_Plant_Val = 'Valid'
      AND To_SLoc_Plant_Val = 'Valid'
      AND Material_Plant_Val = 'Valid'
      AND Movement_Val = 'Valid'
      AND User_Plant_Val = 'Valid'
      AND RowNum = 1;

    -- Step 3: Only insert new records
    SELECT * INTO #InsertedRecords
    FROM #t2 AS source
    WHERE NOT EXISTS (
        SELECT 1
        FROM Trn_SapTransfer_Records r
        WHERE r.Plant_ID = source.Plant_ID
          AND r.Material_ID = source.From_Material_ID
          AND r.SLoc_ID = source.From_SLoc_ID
          AND r.To_SLoc_ID = source.To_SLoc_ID
          AND CAST(r.Created_On AS DATE) = CAST(GETDATE() AS DATE)
          AND r.Approval_Status NOT IN ('Approved', 'Cancelled')
          AND r.Qty = source.Qty
    );

    -- Step 4: Insert valid records if any
    IF EXISTS (SELECT 1 FROM #InsertedRecords)
    BEGIN
        INSERT INTO Trn_Document (
            Plant_ID,
			Movement_ID,
			Movement_Name,
			Status,
            Created_By,
			Created_On,
			Approval_Status
        )
        VALUES (
            (SELECT TOP 1 Plant_ID FROM #InsertedRecords),
             5,
            @Movement_Code,
            'Active',
            @Created_By,
            GETDATE(),
            'Pending'
        );

        SET @Docid = SCOPE_IDENTITY();

        INSERT INTO Trn_SapTransfer_Records (
            Doc_ID,
			Movement_ID,
			Plant_ID,
			Material_ID, 
			Qty,
			SLoc_ID, 
            Valuation_Type,
			Batch,  
            To_SLoc_ID,
			Remarks,
			Approval_Status, 
            Created_By, 
			Created_On
        )
        SELECT 
            @Docid,
			 5,
			Plant_ID, 
			From_Material_ID,
			Qty,
			From_SLoc_ID,
            Valuation_Type,
			Batch,
			To_SLoc_ID, 
			Remark,
            'Pending',
			@Created_By,
			GETDATE()
        FROM #InsertedRecords;

        INSERT INTO Trn_Approval_History (
            Doc_ID,
			Plant_ID,
			Movement_ID,
			Approver_ID,
            Approver_Comment, 
			Approver_Status, 
			Approval_level, 
            Created_By, 
			Created_On
        )
        VALUES (
            @Docid,
            (SELECT TOP 1 Plant_ID FROM #InsertedRecords),
             5,
            @Created_By,
            'Initial approval',
            'Pending',
            3,
            @Created_By,
            GETDATE()
        );
    END;

    -- Step 5: Output Error Records
    SELECT *, 'Error_Records' AS Status
    FROM #t1
    WHERE Plant_Val = 'Invalid'
       OR Material_Val = 'Invalid'
       OR From_SLoc_Val = 'Invalid'
       OR To_SLoc_Val = 'Invalid'
       OR From_SLoc_Plant_Val = 'Invalid'
       OR To_SLoc_Plant_Val = 'Invalid'
       OR Material_Plant_Val = 'Invalid'
       OR Movement_Val = 'Invalid'
       OR User_Plant_Val = 'Invalid';

    -- Step 6: Output New Inserted Records
    SELECT *, 'New_Records' AS Status FROM #InsertedRecords;

    -- Step 7: Cleanup
    DROP TABLE IF EXISTS #t1, #t2, #InsertedRecords, #transation;
END;
