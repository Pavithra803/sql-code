
ALTER PROCEDURE [dbo].[UploadTrn309Movt]
    @Created_By INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Docid INT;

    -- Step 1: Insert into Trn_Document with Approval_Status set to 'Pending'
    INSERT INTO Trn_Document (
        Plant_ID,
        Movement_ID,
        Movement_Name,
        Status,
        Created_By,
        Created_On,
        Approval_Status  -- Adding Approval_Status column here
    )
    VALUES (
        (SELECT Plant_ID FROM Mst_Plant WHERE Plant_Code = '1210'),
        4,
        'Movement type 309',
        'Active',
        @Created_By,
        GETDATE(),
        'Pending'  -- Setting the Approval_Status to 'Pending'
    );

    -- Step 2: Get the generated Doc_ID
    SET @Docid = SCOPE_IDENTITY();
    PRINT @Docid;

    -- Step 3: Validate Input Data + Add Material Descriptions
    SELECT 
        t.*,
        fm.Description AS From_Description,
        tm.Description AS To_Description,
        CASE WHEN t.Plant_Code IN (SELECT Plant_Code FROM Mst_Plant WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS Plant_val,
        CASE WHEN t.From_Material_Code IN (SELECT Material_Code FROM Mst_Material WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS From_Mat,
        CASE WHEN t.To_Material_Code IN (SELECT Material_Code FROM Mst_Material WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS To_Mat,
        CASE WHEN t.From_Storage_Code IN (SELECT Storage_Code FROM Mst_Storage_Location WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS From_SLoc,
        CASE WHEN t.To_Storage_Code IN (SELECT Storage_Code FROM Mst_Storage_Location WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS To_SLoc
    INTO #t1
    FROM #transation AS t
    LEFT JOIN Mst_Material AS fm ON fm.Material_Code = t.From_Material_Code
    LEFT JOIN Mst_Material AS tm ON tm.Material_Code = t.To_Material_Code;

    -- Step 4: Map Valid Data to IDs
    SELECT 
        p.Plant_ID,
        m1.Material_ID AS From_Material_Code,
        m1.Description AS From_Description,
        t.From_Qty,
        s1.SLoc_ID AS From_Storage_Code,
        t.From_Valuation_Type,
        t.From_Batch,
        CAST(t.From_Rate_Per_Unit AS DECIMAL(18,2)) AS From_Rate_Per_Unit,
        m2.Material_ID AS To_Material_Code,
        m2.Description AS To_Description,
        t.To_Qty,
        s2.SLoc_ID AS To_Storage_Code,
        t.To_Valuation_Type,
        t.To_Batch,
        CAST(t.To_Rate_Per_Unit AS DECIMAL(18,2)) AS To_Rate_Per_Unit,
        (CAST(t.To_Rate_Per_Unit AS DECIMAL(10,2)) - CAST(t.From_Rate_Per_Unit AS DECIMAL(10,2))) AS Net_Difference_Price,
        t.Remark
    INTO #t2
    FROM #t1 AS t
    INNER JOIN Mst_Plant AS p ON p.Plant_Code = t.Plant_Code
    INNER JOIN Mst_Material AS m1 ON m1.Material_Code = t.From_Material_Code
    INNER JOIN Mst_Material AS m2 ON m2.Material_Code = t.To_Material_Code
    INNER JOIN Mst_Storage_Location AS s1 ON s1.Storage_Code = t.From_Storage_Code
    INNER JOIN Mst_Storage_Location AS s2 ON s2.Storage_Code = t.To_Storage_Code
    WHERE t.Plant_val = 'Valid'
      AND t.From_Mat = 'Valid'
      AND t.To_Mat = 'Valid'
      AND t.From_SLoc = 'Valid'
      AND t.To_SLoc = 'Valid';

    -- Step 5: Identify Duplicates
    SELECT  
        p.Plant_Code,
        m1.Material_Code AS From_Material_Code,
        m1.Description AS From_Description,
        t2.From_Qty,
        s1.Storage_Code AS From_Storage_Code,
        t2.From_Valuation_Type,
        t2.From_Batch,
        t2.From_Rate_Per_Unit,
        m2.Material_Code AS To_Material_Code,
        m2.Description AS To_Description,
        t2.To_Qty,
        s2.Storage_Code AS To_Storage_Code,
        t2.To_Valuation_Type,
        t2.To_Batch,
        t2.To_Rate_Per_Unit,
		 d.Approval_Status, 
        t2.Remark,
        'Duplicates_Records' AS Status
       
    INTO #dup
    FROM #t2 t2
    INNER JOIN Mst_Plant p ON t2.Plant_ID = p.Plant_ID
    INNER JOIN Mst_Material m1 ON m1.Material_ID = t2.From_Material_Code
    INNER JOIN Mst_Material m2 ON m2.Material_ID = t2.To_Material_Code
    INNER JOIN Mst_Storage_Location s1 ON s1.SLoc_ID = t2.From_Storage_Code
    INNER JOIN Mst_Storage_Location s2 ON s2.SLoc_ID = t2.To_Storage_Code
		INNER JOIN Trn_Document d ON d.Doc_ID = @Docid 
    WHERE EXISTS (
        SELECT 1 
        FROM Trn_309_Movement m
        WHERE m.Plant_ID = t2.Plant_ID
          AND m.From_Mat_ID = t2.From_Material_Code
          AND m.From_Qty = t2.From_Qty
          AND CAST(m.Created_On AS DATE) = CAST(GETDATE() AS DATE)
    );

    -- Step 6: Identify New Records
    SELECT  
        p.Plant_Code,
        m1.Material_Code AS From_Material_Code,
        m1.Description AS From_Description,
        t2.From_Qty,
        s1.Storage_Code AS From_Storage_Code,
        t2.From_Valuation_Type,
        t2.From_Batch,
        t2.From_Rate_Per_Unit,
        m2.Material_Code AS To_Material_Code,
        m2.Description AS To_Description,
        t2.To_Qty,
        s2.Storage_Code AS To_Storage_Code,
        t2.To_Valuation_Type,
        t2.To_Batch,
        t2.To_Rate_Per_Unit,
		 d.Approval_Status,  
         t2.Remark,
       
        'New_Records' AS Status
    INTO #new
    FROM #t2 t2
    INNER JOIN Mst_Plant p ON t2.Plant_ID = p.Plant_ID
    INNER JOIN Mst_Material m1 ON m1.Material_ID = t2.From_Material_Code
    INNER JOIN Mst_Material m2 ON m2.Material_ID = t2.To_Material_Code
    INNER JOIN Mst_Storage_Location s1 ON s1.SLoc_ID = t2.From_Storage_Code
    INNER JOIN Mst_Storage_Location s2 ON s2.SLoc_ID = t2.To_Storage_Code
	--INNER JOIN Trn_Document d ON t.Doc_ID = d.Doc_ID -- Assuming Doc_ID is available in #t1
	INNER JOIN Trn_Document d ON d.Doc_ID = @Docid  -- Correct join to get Approval_Status
    WHERE NOT EXISTS (
        SELECT 1 
        FROM Trn_309_Movement m
        WHERE m.Plant_ID = t2.Plant_ID
          AND m.From_Mat_ID = t2.From_Material_Code
          AND m.To_Mat_ID = t2.To_Material_Code
          AND m.From_SLoc_ID = t2.From_Storage_Code
          AND m.To_SLoc_ID = t2.To_Storage_Code
          AND CAST(m.Created_On AS DATE) = CAST(GETDATE() AS DATE)
    )
    AND p.Plant_Code = '1210';

    -- Step 7: Insert Valid New Records into Trn_309_Movement
    WITH CTE_NEW AS (
        SELECT * FROM #t2
        WHERE Plant_ID = (SELECT Plant_ID FROM Mst_Plant WHERE Plant_Code = '1210')
    )
    INSERT INTO Trn_309_Movement (
        Doc_ID,
        Plant_ID,
        Movement_ID,
        From_Mat_ID,
        From_Qty,
        From_SLoc_ID,
        From_Valuation_Type,
        From_Batch,
        From_Rate_Per_Unit,
        To_Mat_ID,
        To_Qty,
        To_SLoc_ID,
        To_Valuation_Type,
        To_Batch,
        To_Rate_Per_Unit,
        Remark,
        Created_By,
        Created_On
    )
    SELECT 
        @Docid,
        Plant_ID,
        4,
        From_Material_Code,
        From_Qty,
        From_Storage_Code,
        From_Valuation_Type,
        From_Batch,
        From_Rate_Per_Unit,
        To_Material_Code,
        To_Qty,
        To_Storage_Code,
        To_Valuation_Type,
        To_Batch,
        To_Rate_Per_Unit,
        Remark,
        @Created_By,
        GETDATE()
    FROM CTE_NEW
    WHERE NOT EXISTS (
        SELECT 1
        FROM Trn_309_Movement t
        WHERE t.From_Mat_ID = CTE_NEW.From_Material_Code
          AND t.To_Mat_ID = CTE_NEW.To_Material_Code
          AND t.From_SLoc_ID = CTE_NEW.From_Storage_Code
          AND t.To_SLoc_ID = CTE_NEW.To_Storage_Code
          AND t.Plant_ID = CTE_NEW.Plant_ID
          AND CAST(t.Created_On AS DATE) = CAST(GETDATE() AS DATE)
    );

    -- Step 8: Output Error Records
    SELECT  
        t.Plant_Code,
        t.From_Material_Code,
        t.From_Description,
        t.From_Qty,
        t.From_Storage_Code,
        t.From_Valuation_Type,
        t.From_Batch,
        t.From_Rate_Per_Unit,
        t.To_Material_Code,
        t.To_Description,
        t.To_Qty,
        t.To_Storage_Code,
        t.To_Valuation_Type,
        t.To_Batch,
        t.To_Rate_Per_Unit,
        t.Remark,
        t.Plant_val,
        t.From_Mat,
        t.To_Mat,
        t.From_SLoc,
        t.To_SLoc,
        'Error_Records' AS Status
      
    FROM #t1 AS t
    WHERE t.Plant_val = 'Invalid'
       OR t.From_Mat = 'Invalid'
       OR t.To_Mat = 'Invalid'
       OR t.From_SLoc = 'Invalid'
       OR t.To_SLoc = 'Invalid';

    -- Step 9: Output New Records
    SELECT * FROM #new;

    -- Step 10: Output Duplicate Records
    SELECT * FROM #dup;

    -- Step 11: Cleanup Temporary Tables
    DROP TABLE IF EXISTS #t2, #t1, #transation, #new, #dup;
END;
