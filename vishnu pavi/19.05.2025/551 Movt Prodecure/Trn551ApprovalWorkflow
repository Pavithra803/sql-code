

------1

 CREATE  PROCEDURE [dbo].[Trn551ApprovalWorkflow]
    @Doc_ID INT,
    @Action NVARCHAR(50),
    @Comment NVARCHAR(255),
    @Approval_Level INT,
    @UserID NVARCHAR(255)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Approve INT = 1;
    DECLARE @approve1 INT = @Approve + @Approval_Level;
    DECLARE @Created_By INT;

    IF EXISTS (SELECT * FROM Trn_Document WHERE Doc_ID = @Doc_ID)
    BEGIN
        DECLARE @Plant_ID INT, @Movement_ID INT;

        SELECT 
            @Plant_ID = Plant_ID, 
            @Movement_ID = Movement_ID,
            @Created_By = Created_By
        FROM Trn_Document
        WHERE Doc_ID = @Doc_ID;

        -- âœ… Only proceed if movement type is 201 or 202
        IF @Movement_ID = 1
        BEGIN
            IF EXISTS (
                SELECT *
                FROM Trn_Approval_History
                WHERE Doc_ID = @Doc_ID AND Approver_Status = 'Pending'
            )
            BEGIN
                -- Update current approval record
                IF @Action IN ('Approved', 'Rejected', 'Under Query')
                BEGIN
                    UPDATE Trn_Approval_History
                    SET Approver_Status = @Action,
                        Approver_Comment = @Comment,
                        Approver_ID = @UserID,
                        Modified_By = @UserID,
                        Modified_On = GETDATE()
                    WHERE Doc_ID = @Doc_ID
                      AND Approver_Status = 'Pending';
                END

                -- If Approved, check for next level or close
                IF @Action = 'Approved'
                BEGIN
                    DECLARE @Max_Level INT = 8;

                    IF @Approval_Level < @Max_Level
                    BEGIN
                        INSERT INTO Trn_Approval_History (
                            Doc_ID, Plant_ID, Movement_ID, Approver_Status, Approval_Level,
                            Created_By, Created_On
                        )
                        VALUES (
                            @Doc_ID, @Plant_ID, @Movement_ID, 'Pending', @approve1,
                            @Created_By, GETDATE()
                        );
                    END
                    ELSE
                    BEGIN
                        -- Final approval
                        UPDATE Trn_Document
                        SET Approval_Status = 'Closed'
                        WHERE Doc_ID = @Doc_ID;

                        UPDATE Trn_SapTransfer_Records
                        SET Approval_Status = 'Closed',
                            Modified_By = @UserID,
                            Modified_On = GETDATE()
                        WHERE Doc_ID = @Doc_ID;
                    END
                END
                ELSE IF @Action IN ('Rejected', 'Under Query')
                BEGIN
                    UPDATE Trn_Document
                    SET Approval_Status = @Action
                    WHERE Doc_ID = @Doc_ID;

                    UPDATE Trn_SapTransfer_Records
                    SET Approval_Status = @Action,
                        Modified_By = @UserID,
                        Modified_On = GETDATE()
                    WHERE Doc_ID = @Doc_ID;
                END
            END
        END
    END
END
-------------------------------------------------------------------------------------------------2


ALTER PROCEDURE [dbo].[GetTrnSap551Movt]
    @Created INT
AS
BEGIN
    SET NOCOUNT ON;

    -- âœ… Step 1: Update 'Value' = Qty Ã— Rate_PerPart (only rejection qty considered)
    UPDATE Trn_SapTransfer_Records
    SET Value = Qty * Rate_PerPart
    WHERE Created_By = @Created
      AND Movement_ID = 1;

    -- âœ… Step 2: Return the updated data with difference calculations
    SELECT 
        T.Trn_Sap_ID,
        D.Doc_ID,
        P.Plant_Code,
        M.Material_Code,
        M.Description AS Material_Description,
        M.Material_Type,

        T.Qty AS Rejection_Qty,
        T.Provision_Qty,

        -- âœ… f = b - c â†’ Difference Qty
        (T.Qty - T.Provision_Qty) AS Difference_Qty,

        -- âœ… a = Rate_PerPart
        T.Rate_PerPart, -- rate only for rejection 

        -- âœ… e = a * b â†’ already updated to T.Value
        T.Value AS Rejection_Value,

        -- âœ… d = Provision_Value
        T.Provision_Value,

        -- âœ… g = d - e â†’ Difference Value
        (T.Provision_Value - T.Value) AS Difference_Value,

        S.Storage_Code AS SLoc_Code,
        COALESCE(MT.Movement_Code, CAST(T.Movement_ID AS NVARCHAR(50))) AS Movement_Code,

        T.Reason_For_Movt,
        T.Remarks,
        D.Approval_Status,
        D.Status AS Status,
        CONVERT(VARCHAR(10), T.Created_On, 103) AS Date,
        MLI.Movt_List_ID,
        MLI.Movement_List_Name

    FROM Trn_SapTransfer_Records T

    LEFT JOIN Mst_Plant P ON T.Plant_ID = P.Plant_ID
    LEFT JOIN Mst_Material M ON T.Material_ID = M.Material_ID
    LEFT JOIN Mst_Storage_Location S ON T.SLoc_ID = S.SLoc_ID
    LEFT JOIN Mst_Movement_Type MT ON T.Movement_ID = MT.Movement_ID
    LEFT JOIN Trn_Document D ON T.Doc_ID = D.Doc_ID
    LEFT JOIN Mst_Movement_List_Item MLI 
        ON T.Movement_ID = MLI.Movement_ID
       AND REPLACE(LTRIM(RTRIM(T.Remarks)), ' ', '') = 
           REPLACE(LTRIM(RTRIM(MLI.Movement_List_Code + '-' + MLI.Movement_List_Name)), ' ', '')

    WHERE 
        T.Created_By = @Created
        AND T.Movement_ID = 1
        AND D.Approval_Status IN ('Pending', 'Under Query')

    ORDER BY T.Created_On DESC;
END;
---------------------------------------------------------------------------------------------- 3

ALTER PROCEDURE [dbo].[GetTrnSap551Movt]
    @Created INT
AS
BEGIN
    SET NOCOUNT ON;

    -- âœ… Step 1: Update 'Value' = Qty Ã— Rate_PerPart (Rejection Value)
    UPDATE Trn_SapTransfer_Records
    SET Value = Qty * Rate_PerPart
    WHERE Created_By = @Created
      AND Movement_ID = 1;

    -- âœ… Step 2: Return updated data with proper calculations
    SELECT 
        T.Trn_Sap_ID,
        D.Doc_ID,
        P.Plant_Code,
        M.Material_Code,
        M.Description AS Material_Description,
        M.Material_Type,

        -- âœ… Rejection & Provision
        T.Qty AS Rejection_Qty,
        T.Provision_Qty,

        -- âœ… f = Rejection_Qty - Provision_Qty
        (T.Qty - ISNULL(T.Provision_Qty, 0)) AS Difference_Qty,

        -- âœ… a = Rate_PerPart
        T.Rate_PerPart,

        -- âœ… e = Qty * Rate_PerPart = Rejection_Value
        T.Value AS Rejection_Value,

        -- âœ… d = Provision_Value
        ISNULL(T.Provision_Value, 0) AS Provision_Value,

        -- âœ… g = Provision_Value - Rejection_Value
        (ISNULL(T.Provision_Value, 0) - T.Value) AS Difference_Value,

        -- âœ… Storage & Movement Details
        S.Storage_Code AS SLoc_Code,
        COALESCE(MT.Movement_Code, CAST(T.Movement_ID AS NVARCHAR(50))) AS Movement_Code,

        T.Reason_For_Movt,
        T.Remarks,

        -- âœ… Document & Status Info
        D.Approval_Status,
        D.Status AS Status,
        CONVERT(VARCHAR(10), T.Created_On, 103) AS Date,

        -- âœ… Movement List Info (ID & Name)
        ISNULL(MLI.Movt_List_ID, 0) AS Movt_List_ID,
        ISNULL(MLI.Movement_List_Name, '') AS Movement_List_Name

    FROM Trn_SapTransfer_Records T

    -- ðŸ”— Joins
    LEFT JOIN Mst_Plant P ON T.Plant_ID = P.Plant_ID
    LEFT JOIN Mst_Material M ON T.Material_ID = M.Material_ID
    LEFT JOIN Mst_Storage_Location S ON T.SLoc_ID = S.SLoc_ID
    LEFT JOIN Mst_Movement_Type MT ON T.Movement_ID = MT.Movement_ID
    LEFT JOIN Trn_Document D ON T.Doc_ID = D.Doc_ID

    -- ðŸ”— Movement List Join based on matching code-name pattern
    LEFT JOIN Mst_Movement_List_Item MLI 
        ON T.Movement_ID = MLI.Movement_ID
       AND REPLACE(LTRIM(RTRIM(T.Remarks)), ' ', '') = 
           REPLACE(LTRIM(RTRIM(MLI.Movement_List_Code + '-' + MLI.Movement_List_Name)), ' ', '')

    -- ðŸ“Œ Filters
    WHERE 
        T.Created_By = @Created
        AND T.Movement_ID = 1
        AND D.Approval_Status IN ('Pending', 'Under Query')

    ORDER BY T.Created_On DESC;
END;
