USE [Sap_Approval]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[UploadTrn309SapTransferRecord]
    @Created_By INT,
    @Movement_Code NVARCHAR(10) = '309'     -- Movement_Code for validation
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Docid INT;

    -- Step 1: Enrich and Validate Input Data into #t1
    SELECT 
        t.*,
        fm.Material_ID AS From_Material_ID,
        tm.Material_ID AS To_Material_ID,
        p.Plant_ID,
        s1.SLoc_ID AS From_SLoc_ID,
        s2.SLoc_ID AS To_SLoc_ID,

        -- Base Validations without using @Plant_Code
        CASE WHEN p.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Plant_Val,
        CASE WHEN fm.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS From_Mat_Val,
        CASE WHEN tm.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS To_Mat_Val,
        CASE WHEN s1.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Val,
        CASE WHEN s2.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Val,

        -- Location and Material Plant Validations
        CASE WHEN s1.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Plant_Val,
        CASE WHEN s2.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Plant_Val,
        CASE WHEN fm.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS From_Material_Plant_Val,
        CASE WHEN tm.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS To_Material_Plant_Val,

        -- Movement Type Validation
        CASE WHEN t.Movement_Code = @Movement_Code THEN 'Valid' ELSE 'Invalid' END AS Movement_Val,

        -- User belongs to same Plant as in transaction
        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM Mst_User u
                INNER JOIN Mst_Plant p ON u.Plant_ID = p.Plant_ID
                WHERE u.User_ID = @Created_By
                  AND p.Plant_Code = t.Plant_Code
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS User_Plant_Val,

        -- Remove duplicates based on Plant_Code, From_Material_Code, From_Storage_Code 
        ROW_NUMBER() OVER (
            PARTITION BY t.Plant_Code, t.From_Material_Code, t.From_Storage_Code 
            ORDER BY t.Plant_Code
        ) AS RowNum

    INTO #t1
    FROM #transation AS t
    LEFT JOIN Mst_Plant p ON p.Plant_Code = t.Plant_Code
    LEFT JOIN Mst_Material fm ON fm.Material_Code = t.From_Material_Code AND fm.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Material tm ON tm.Material_Code = t.To_Material_Code AND tm.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Storage_Location s1 ON s1.Storage_Code = t.From_Storage_Code AND s1.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Storage_Location s2 ON s2.Storage_Code = t.To_Storage_Code AND s2.Plant_ID = p.Plant_ID;

    -- Step 2: Filter only Valid Rows
    SELECT * INTO #t2
    FROM #t1
    WHERE Plant_Val = 'Valid'
      AND From_Mat_Val = 'Valid'
      AND To_Mat_Val = 'Valid'
      AND From_SLoc_Val = 'Valid'
      AND To_SLoc_Val = 'Valid'
      AND From_SLoc_Plant_Val = 'Valid'
      AND To_SLoc_Plant_Val = 'Valid'
      AND From_Material_Plant_Val = 'Valid'
      AND To_Material_Plant_Val = 'Valid'
      AND Movement_Val = 'Valid'
      AND User_Plant_Val = 'Valid'
      AND RowNum = 1;

    -- Step 3: Detect Duplicates (with From_Qty check)
    SELECT * INTO #dup
    FROM #t2 t
    WHERE EXISTS (
        SELECT *
        FROM Trn_SapTransfer_Records r
        WHERE r.Plant_ID = t.Plant_ID
          AND r.Material_ID = t.From_Material_ID
          AND r.To_Material_ID = t.To_Material_ID
          AND r.SLoc_ID = t.From_SLoc_ID
          AND r.To_SLoc_ID = t.To_SLoc_ID
          AND CAST(r.Created_On AS DATE) = CAST(GETDATE() AS DATE)
          AND r.Approval_Status NOT IN ('Approved', 'Cancelled')
          AND r.Qty = t.From_Qty               -- Added From_Qty validation here
    );

    -- Step 4: Filter New Records Only (with From_Qty check)
    SELECT * INTO #InsertedRecords
    FROM #t2 AS source
    WHERE NOT EXISTS (
        SELECT * 
        FROM Trn_SapTransfer_Records r
        WHERE r.Plant_ID = source.Plant_ID
          AND r.Material_ID = source.From_Material_ID
          AND r.To_Material_ID = source.To_Material_ID
          AND r.SLoc_ID = source.From_SLoc_ID
          AND r.To_SLoc_ID = source.To_SLoc_ID
          AND CAST(r.Created_On AS DATE) = CAST(GETDATE() AS DATE)
          AND r.Approval_Status NOT IN ('Approved', 'Cancelled')
          AND r.Qty = source.From_Qty          -- Added From_Qty validation here
    );

    -- Step 5: Insert Records
    IF EXISTS (SELECT * FROM #InsertedRecords)
    BEGIN
        INSERT INTO Trn_Document (
            Plant_ID, Movement_ID, Movement_Name, Status, Created_By, Created_On, Approval_Status
        )
        VALUES (
            (SELECT TOP 1 Plant_ID FROM #InsertedRecords),
            4,
            @Movement_Code,
            'Active',
            @Created_By,
            GETDATE(),
            'Pending'
        );

        SET @Docid = SCOPE_IDENTITY();

        INSERT INTO Trn_SapTransfer_Records (
            Doc_ID, Movement_ID, Plant_ID, Material_ID, Qty, SLoc_ID, Valuation_Type, Batch,
            Rate_PerPart, To_Material_ID, To_SLoc_ID, To_Rate_309, Remarks,
            Approval_Status, Created_By, Created_On
        )
        SELECT 
            @Docid, 4, Plant_ID, From_Material_ID, From_Qty, From_SLoc_ID, From_Valuation_Type, From_Batch,
            CAST(From_Rate_Per_Unit AS DECIMAL(18,2)), To_Material_ID, To_SLoc_ID, 
            CAST(To_Rate_Per_Unit AS DECIMAL(18,2)), Remark,
            'Pending', @Created_By, GETDATE()
        FROM #InsertedRecords;

        INSERT INTO Trn_Approval_History (
            Doc_ID, Plant_ID, Movement_ID, Approver_ID, Approver_Comment,
            Approver_Status, Approval_level, Created_By, Created_On
        )
        VALUES (
            @Docid,
            (SELECT TOP 1 Plant_ID FROM #InsertedRecords),
            4,
            @Created_By,
            'Initial approval',
            'Pending',
            3,
            @Created_By,
            GETDATE()
        );
    END

    -- Step 6: Output Error Records
    SELECT *, 'Error_Records' AS Status
    FROM #t1
    WHERE Plant_Val = 'Invalid'
       OR From_Mat_Val = 'Invalid'
       OR To_Mat_Val = 'Invalid'
       OR From_SLoc_Val = 'Invalid'
       OR To_SLoc_Val = 'Invalid'
       OR From_SLoc_Plant_Val = 'Invalid'
       OR To_SLoc_Plant_Val = 'Invalid'
       OR From_Material_Plant_Val = 'Invalid'
       OR To_Material_Plant_Val = 'Invalid'
       OR Movement_Val = 'Invalid'
       OR User_Plant_Val = 'Invalid';

    -- Step 7: Output New Records
    SELECT *, 'New_Records' AS Status FROM #InsertedRecords;

    -- Step 8: Output Duplicate Records
    SELECT *, 'Duplicate_Records' AS Status FROM #dup;

    -- Step 9: Cleanup
    DROP TABLE IF EXISTS #t1, #t2, #dup, #InsertedRecords, #transation;
END;
