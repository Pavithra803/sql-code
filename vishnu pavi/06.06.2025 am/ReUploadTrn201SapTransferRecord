ALTER PROCEDURE [dbo].[ReuploadTrn201SapTransferRecord]
    @Doc_ID INT,
    @Created_By INT,
    @Trn_Sap_ID INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @PlantID INT;
    DECLARE @MovementID INT;

    -- Step 1: Enrich and validate input data from #trn202 into #t1
    SELECT
        t.*,
        p.Plant_ID,
        m.Material_ID,
        s.SLoc_ID,
        cc.CostCenter_ID,
        mt.Movement_ID,
        vt.Valuation_ID,

        -- Validations with explicit flags
        CASE WHEN p.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Plant_Val,
        CASE WHEN m.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Material_Val,
        CASE WHEN s.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS SLoc_Val,
        CASE WHEN cc.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS CostCenter_Val,
        CASE WHEN mt.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Movement_Val,
        CASE WHEN vt.Valuation_ID IS NOT NULL THEN 'Valid' ELSE 'Invalid' END AS Valuation_Val,

        -- SLoc belongs to same Plant
        CASE WHEN s.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS Plant_SLoc_Val,
        -- CostCenter belongs to same Plant
        CASE WHEN cc.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS Plant_CostCenter_Val,

        -- Reason validation by comparing trimmed concatenated fields in movement list items
        CASE
            WHEN EXISTS (
                SELECT 1 FROM Mst_Movement_List_Item mli
                WHERE mli.Movement_ID = mt.Movement_ID
                  AND REPLACE(LTRIM(RTRIM(mli.Movement_List_Code)) + '-' + LTRIM(RTRIM(mli.Movement_List_Name)), ' ', '') =
                      REPLACE(LTRIM(RTRIM(t.Reason_For_Movt)), ' ', '')
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS Reason_Val,

        -- User belongs to same Plant validation
        CASE
            WHEN EXISTS (
                SELECT 1 FROM Mst_User u
                INNER JOIN Mst_Plant p2 ON u.Plant_ID = p2.Plant_ID
                WHERE u.User_ID = @Created_By
                  AND p2.Plant_Code = t.Plant_Code
                  AND p2.Active_Status = 1
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS User_Plant_Val,

        ROW_NUMBER() OVER (
            PARTITION BY t.Plant_Code, t.Material_Code, t.SLoc_Code, t.CostCenter_Code, t.Movement_Code
            ORDER BY t.Plant_Code
        ) AS RowNum
    INTO #t1
    FROM #trn201 AS t
    LEFT JOIN Mst_Plant p ON p.Plant_Code = t.Plant_Code
    LEFT JOIN Mst_Material m ON m.Material_Code = t.Material_Code AND m.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Storage_Location s ON s.Storage_Code = t.SLoc_Code AND s.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Cost_Center cc ON cc.CostCenter_Code = t.CostCenter_Code AND cc.Plant_ID = p.Plant_ID
    LEFT JOIN Mst_Movement_Type mt ON mt.Movement_Code = t.Movement_Code AND mt.Active_Status = 1
    LEFT JOIN Mst_Valuation_Type vt ON LTRIM(RTRIM(vt.Valuation_Name)) = LTRIM(RTRIM(t.Valuation_Type));

    -- Step 2: Filter valid rows only
    SELECT * INTO #ValidRows
    FROM #t1
    WHERE Plant_Val = 'Valid'
      AND Material_Val = 'Valid'
      AND SLoc_Val = 'Valid'
      AND CostCenter_Val = 'Valid'
      AND Movement_Val = 'Valid'
      AND Valuation_Val = 'Valid'
      AND Plant_SLoc_Val = 'Valid'
      AND Plant_CostCenter_Val = 'Valid'
      AND Reason_Val = 'Valid'
      AND User_Plant_Val = 'Valid'
      AND RowNum = 1;

    -- Step 3: Update Trn_SapTransfer_Records based on valid rows and @Doc_ID
   UPDATE r
SET
    r.Movement_ID = v.Movement_ID,
    r.Plant_ID = v.Plant_ID,
    r.Material_ID = v.Material_ID,
    r.SLoc_ID = v.SLoc_ID,
    r.CostCenter_ID = v.CostCenter_ID,
    r.Valuation_Type = v.Valuation_ID,
    r.Batch = v.Batch,
    r.Rate_PerPart = v.Rate_Per_Unit,
    r.Qty = v.Quantity,
    r.Remarks = v.Reason_For_Movt,
    r.Approval_Status = 'Pending',
    r.Modified_By = 11,
    r.Modified_On = GETDATE()
FROM Trn_SapTransfer_Records r
JOIN #ValidRows v ON r.Trn_Sap_ID = v.Trn_Sap_ID
WHERE r.Doc_ID = @Doc_ID;

    -- Step 4: Capture MovementID and PlantID for further use
    SELECT TOP 1 @MovementID = Movement_ID, @PlantID = Plant_ID FROM #ValidRows;

    -- Step 5: Update approval history to 'Pending'
    UPDATE Trn_Approval_History
    SET
        Approver_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 6: Update document approval status to 'Pending'
    UPDATE Trn_Document
    SET
        Approval_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 7: Update Trn_SapTransfer_Records approval status to 'Pending'
    UPDATE Trn_SapTransfer_Records
    SET
        Approval_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 8: Return updated valid records for feedback
    SELECT
        r.Doc_ID,
        p.Plant_Code,
        m.Material_Code,
        r.Qty AS Quantity,
        s.Storage_Code AS SLoc_Code,
        r.Remarks AS Reason_For_Movt,
        cc.CostCenter_Code,
        mt.Movement_Code,
        vt.Valuation_Name AS Valuation_Type,
        r.Batch,
        r.Rate_PerPart AS Rate_Per_Unit
    FROM Trn_SapTransfer_Records r
    INNER JOIN Mst_Plant p ON p.Plant_ID = r.Plant_ID
    INNER JOIN Mst_Material m ON m.Material_ID = r.Material_ID
    INNER JOIN Mst_Storage_Location s ON s.SLoc_ID = r.SLoc_ID
    INNER JOIN Mst_Cost_Center cc ON cc.CostCenter_ID = r.CostCenter_ID
    INNER JOIN Mst_Movement_Type mt ON mt.Movement_ID = r.Movement_ID
    LEFT JOIN Mst_Valuation_Type vt ON vt.Valuation_Name = r.Valuation_Type
    WHERE r.Doc_ID = @Doc_ID;

    -- Step 9: Return invalid records with detailed error status for feedback
    SELECT
        t.*,
        (SELECT STRING_AGG(Movement_List_Code + ' - ' + Movement_List_Name, ', ') FROM Mst_Movement_List_Item WHERE Movement_ID = t.Movement_ID) AS Expected_Reasons,
        (SELECT STRING_AGG(Valuation_Name, ', ') FROM Mst_Valuation_Type) AS Expected_Valuation_Types,
        'Error_Records' AS Status
    FROM #t1 t
    WHERE Plant_Val = 'Invalid'
       OR Material_Val = 'Invalid'
       OR SLoc_Val = 'Invalid'
       OR CostCenter_Val = 'Invalid'
       OR Movement_Val = 'Invalid'
       OR Valuation_Val = 'Invalid'
       OR Plant_SLoc_Val = 'Invalid'
       OR Plant_CostCenter_Val = 'Invalid'
       OR Reason_Val = 'Invalid'
       OR User_Plant_Val = 'Invalid';

    -- Cleanup temporary tables
    DROP TABLE IF EXISTS #t1, #ValidRows, #trn202;
END;
