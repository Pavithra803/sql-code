USE [SAPAPPROVAL]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[ReUploadTrn309SapTransferRecord]
    @Doc_ID INT = NULL,
    @Created_By INT,
    @Movement_Code NVARCHAR(10) = '309'
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @PlantID INT;

    -- Step 1: Enrich and validate input data from #transation into #t1
    SELECT 
        t.*,
        p.Plant_ID,
        fm.Material_ID AS From_Material_ID,
        tm.Material_ID AS To_Material_ID,
        s1.SLoc_ID AS From_SLoc_ID,
        s2.SLoc_ID AS To_SLoc_ID,

        -- Validations
        CASE WHEN p.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS Plant_Val,
        CASE WHEN fm.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS From_Mat_Val,
        CASE WHEN tm.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS To_Mat_Val,
        CASE WHEN s1.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Val,
        CASE WHEN s2.Active_Status = 1 THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Val,

        CASE WHEN s1.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS From_SLoc_Plant_Val,
        CASE WHEN s2.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS To_SLoc_Plant_Val,
        CASE WHEN fm.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS From_Material_Plant_Val,
        CASE WHEN tm.Plant_ID = p.Plant_ID THEN 'Valid' ELSE 'Invalid' END AS To_Material_Plant_Val,

        CASE WHEN t.Movement_Code = @Movement_Code THEN 'Valid' ELSE 'Invalid' END AS Movement_Val,

        CASE 
            WHEN EXISTS (
                SELECT 1
                FROM Mst_User u
                INNER JOIN Mst_Plant p2 ON u.Plant_ID = p2.Plant_ID
                WHERE u.User_ID = @Created_By
                  AND p2.Plant_Code = t.Plant_Code
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS User_Plant_Val,

        ROW_NUMBER() OVER (
            PARTITION BY t.Plant_Code, t.From_Material_Code, t.From_Storage_Code 
            ORDER BY t.Plant_Code
        ) AS RowNum
    INTO #t1
    FROM #transation AS t
    LEFT JOIN Mst_Plant p ON p.Plant_Code = t.Plant_Code
    LEFT JOIN Mst_Material fm ON fm.Material_Code = t.From_Material_Code
    LEFT JOIN Mst_Material tm ON tm.Material_Code = t.To_Material_Code
    LEFT JOIN Mst_Storage_Location s1 ON s1.Storage_Code = t.From_Storage_Code
    LEFT JOIN Mst_Storage_Location s2 ON s2.Storage_Code = t.To_Storage_Code;

    -- Step 2: Filter valid rows only
    SELECT * INTO #ValidRows
    FROM #t1
    WHERE Plant_Val = 'Valid'
      AND From_Mat_Val = 'Valid'
      AND To_Mat_Val = 'Valid'
      AND From_SLoc_Val = 'Valid'
      AND To_SLoc_Val = 'Valid'
      AND From_SLoc_Plant_Val = 'Valid'
      AND To_SLoc_Plant_Val = 'Valid'
      AND From_Material_Plant_Val = 'Valid'
      AND To_Material_Plant_Val = 'Valid'
      AND Movement_Val = 'Valid'
      AND User_Plant_Val = 'Valid'
      AND RowNum = 1;

    -- Step 3: Update Trn_SapTransfer_Records based only on Doc_ID match
    UPDATE r
    SET
        r.Movement_ID = 4, -- or get dynamically if needed
        r.Plant_ID = v.Plant_ID,
        r.Material_ID = v.From_Material_ID,
        r.Qty = v.From_Qty,
        r.SLoc_ID = v.From_SLoc_ID,
        r.Valuation_Type = v.From_Valuation_Type,
        r.Batch = v.From_Batch,
        r.Rate_PerPart = CAST(v.From_Rate_Per_Unit AS DECIMAL(18,2)),
        r.To_Material_ID = v.To_Material_ID,
        r.To_SLoc_ID = v.To_SLoc_ID,
        r.To_Rate_309 = CAST(v.To_Rate_Per_Unit AS DECIMAL(18,2)),
        r.Remarks = v.Remark,
        r.Approval_Status = 'Pending',
        r.Modified_By = @Created_By,
        r.Modified_On = GETDATE()
    FROM Trn_SapTransfer_Records r
    INNER JOIN #ValidRows v ON r.Doc_ID = v.Doc_ID
    WHERE r.Doc_ID = @Doc_ID;

    -- Step 4: Get PlantID
    SELECT TOP 1 @PlantID = Plant_ID FROM #ValidRows;

    -- Step 5: Update approval history
    UPDATE Trn_Approval_History
    SET 
        Approver_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 6: Update document status
    UPDATE Trn_Document
    SET 
        Approval_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 7: Also update SapTransfer status (redundant but safe)
    UPDATE Trn_SapTransfer_Records
    SET 
        Approval_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 8: Return invalid rows for feedback
    SELECT t.*,
           'Error_Records' AS Status
    FROM #t1 t
    WHERE Plant_Val = 'Invalid'
       OR From_Mat_Val = 'Invalid'
       OR To_Mat_Val = 'Invalid'
       OR From_SLoc_Val = 'Invalid'
       OR To_SLoc_Val = 'Invalid'
       OR From_SLoc_Plant_Val = 'Invalid'
       OR To_SLoc_Plant_Val = 'Invalid'
       OR From_Material_Plant_Val = 'Invalid'
       OR To_Material_Plant_Val = 'Invalid'
       OR Movement_Val = 'Invalid'
       OR User_Plant_Val = 'Invalid';

    -- Cleanup
    DROP TABLE IF EXISTS #t1, #ValidRows, #transation;
END;
