ALTER PROCEDURE [dbo].[ReUploadTrn202SapTransferRecord]
    @Doc_ID INT,
    @Created_By INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MovementID INT;
    DECLARE @PlantID INT;

    -- Step 1: Enrich and Validate Input Data into #t1 (like Upload SP)
    SELECT   
        t.*,  
        p.Plant_ID,  
        m.Material_ID,  
        m.Material_Type,  
        s.SLoc_ID,  
        cc.CostCenter_ID,  
        mt.Movement_ID,

        -- Validations  
        CASE WHEN t.Plant_Code IN (SELECT Plant_Code FROM Mst_Plant WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS Plant_Val,
        CASE WHEN t.Material_Code IN (SELECT Material_Code FROM Mst_Material WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS Material_Val,
        CASE WHEN t.SLoc_Code IN (SELECT Storage_Code FROM Mst_Storage_Location WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS SLoc_Val,
        CASE WHEN t.CostCenter_Code IN (SELECT CostCenter_Code FROM Mst_Cost_Center WHERE Active_Status = 1) THEN 'Valid' ELSE 'Invalid' END AS CostCenter_Val,

        -- SLoc belongs to same Plant  
        CASE 
            WHEN EXISTS (
                SELECT *
                FROM Mst_Plant p2
                INNER JOIN Mst_Storage_Location s2 ON p2.Plant_ID = s2.Plant_ID
                WHERE p2.Plant_Code = t.Plant_Code 
                  AND s2.Storage_Code = t.SLoc_Code 
                  AND p2.Active_Status = 1 
                  AND s2.Active_Status = 1
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS Plant_SLoc_Val,

        -- CostCenter belongs to same Plant  
        CASE 
            WHEN EXISTS (
                SELECT *
                FROM Mst_Plant p3
                INNER JOIN Mst_Cost_Center cc2 ON p3.Plant_ID = cc2.Plant_ID
                WHERE p3.Plant_Code = t.Plant_Code 
                  AND cc2.CostCenter_Code = t.CostCenter_Code 
                  AND p3.Active_Status = 1 
                  AND cc2.Active_Status = 1
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS Plant_CostCenter_Val,

        -- Reason for Movement related to Movement Code  
        CASE
            WHEN EXISTS (
                SELECT * FROM Mst_Movement_List_Item
                WHERE Movement_ID = mt.Movement_ID
                  AND REPLACE(LTRIM(RTRIM(Movement_List_Code)) + '-' + LTRIM(RTRIM(Movement_List_Name)), ' ', '') 
                      = REPLACE(LTRIM(RTRIM(t.Reason_For_Movt)), ' ', '')
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS Reason_Val,

        -- User belongs to same Plant
        CASE 
            WHEN EXISTS (
                SELECT 1 
                FROM Mst_User up
                INNER JOIN Mst_User u ON u.User_ID = up.User_ID
                INNER JOIN Mst_Plant p ON up.Plant_ID = p.Plant_ID
                WHERE u.User_ID = @Created_By
                  AND p.Plant_Code = t.Plant_Code
            ) THEN 'Valid'
            ELSE 'Invalid'
        END AS User_Plant_Val,

        ROW_NUMBER() OVER (  
            PARTITION BY t.Plant_Code, t.Material_Code, t.SLoc_Code, t.Movement_Code  
            ORDER BY t.Plant_Code  
        ) AS RowNum
    INTO #t1  
    FROM #trn202 AS t  
    LEFT JOIN Mst_Plant p ON p.Plant_Code = t.Plant_Code  
    LEFT JOIN Mst_Material m ON m.Material_Code = t.Material_Code  
    LEFT JOIN Mst_Storage_Location s ON s.Storage_Code = t.SLoc_Code  
    LEFT JOIN Mst_Cost_Center cc ON cc.CostCenter_Code = t.CostCenter_Code 
    LEFT JOIN Mst_Movement_Type mt ON mt.Movement_Code = t.Movement_Code AND mt.Active_Status = 1;  

    -- Step 2: Filter only valid rows (all validations)
    SELECT * INTO #ValidRows
    FROM #t1
    WHERE Plant_Val = 'Valid'  
      AND Material_Val = 'Valid'  
      AND SLoc_Val = 'Valid'  
      AND CostCenter_Val = 'Valid'  
      AND Plant_SLoc_Val = 'Valid'
      AND Plant_CostCenter_Val = 'Valid'
      AND Reason_Val = 'Valid'
      AND User_Plant_Val = 'Valid'
      AND RowNum = 1;

    -- Step 3: Update existing Trn_SapTransfer_Records for @Doc_ID only for valid rows
    UPDATE tsr
    SET 
        tsr.Qty = v.Quantity,
        tsr.Remarks = v.Reason_For_Movt,
        tsr.Valuation_Type = v.Valuation_Type,
        tsr.Batch = v.Batch,
        tsr.Rate_PerPart = v.Rate_Per_Unit,
        tsr.Modified_By = @Created_By,
        tsr.Modified_On = GETDATE()
    FROM Trn_SapTransfer_Records tsr
    INNER JOIN #ValidRows v ON tsr.Doc_ID = @Doc_ID
        AND tsr.Plant_ID = v.Plant_ID
        AND tsr.Material_ID = v.Material_ID
        AND tsr.SLoc_ID = v.SLoc_ID
        AND tsr.CostCenter_ID = v.CostCenter_ID
        AND tsr.Movement_ID = v.Movement_ID;

    -- Step 4: Get MovementID and PlantID from one valid record for status updates
    SELECT TOP 1 @MovementID = Movement_ID, @PlantID = Plant_ID FROM #ValidRows;

    -- Step 5: Update approval history status to Pending
    UPDATE Trn_Approval_History
    SET 
        Approver_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 6: Update document status to Pending
    UPDATE Trn_Document
    SET 
        Approval_Status = 'Pending',
        Modified_By = @Created_By,
        Modified_On = GETDATE()
    WHERE Doc_ID = @Doc_ID;

    -- Step 7: Output invalid records with expected reasons
    SELECT t.*, 
           (SELECT STRING_AGG(Movement_List_Code + ' - ' + Movement_List_Name, ', ')
            FROM Mst_Movement_List_Item
            WHERE Movement_ID = t.Movement_ID) AS Expected_Reasons,
           'Error_Records' AS Status
    FROM #t1 AS t  
    WHERE Plant_Val = 'Invalid'  
       OR Material_Val = 'Invalid'  
       OR SLoc_Val = 'Invalid'  
       OR CostCenter_Val = 'Invalid'
       OR Plant_SLoc_Val = 'Invalid'
       OR Plant_CostCenter_Val = 'Invalid'
       OR Reason_Val = 'Invalid'
       OR User_Plant_Val = 'Invalid';

    -- Step 8: Output updated valid records for confirmation
   -- SELECT *, 'Updated_Records' AS Status FROM #ValidRows;

    -- Cleanup
    DROP TABLE IF EXISTS #t1, #ValidRows;
END;
